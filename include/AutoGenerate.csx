using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

static void UpdateAutoGeneratedSection(string fileName, List<string> replacementLines, string section = null)
{
    string beginMarker = "// BEGIN GENERATED SECTION: DO NOT EDIT";
    if (!string.IsNullOrEmpty(section))
    {
        beginMarker = $"// BEGIN GENERATED SECTION ({section}): DO NOT EDIT";
    }
    const string endMarker = "// END GENERATED SECTION";

    var existingLines = File.ReadAllLines(fileName);
    var updatedLines = new List<string>();

    bool foundGeneratedBlock = false;
    bool inGeneratedBlock = false;
    foreach (var line in existingLines)
    {
        if (!inGeneratedBlock)
        {
            updatedLines.Add(line);
            if (line == beginMarker)
            {
                foundGeneratedBlock = true;
                inGeneratedBlock = true;
                updatedLines.AddRange(replacementLines);
            }
        }
        else
        {
            if (line == endMarker)
            {
                updatedLines.Add(line);
                inGeneratedBlock = false;
            }
        }
    }

    if (!foundGeneratedBlock)
    {
        throw new Exception($"'{beginMarker}' not found in {fileName}");
    }

    if (inGeneratedBlock)
    {
        throw new Exception($"'{endMarker}' not found in {fileName}");
    }

    using (TextWriter docsWriter = File.CreateText(fileName))
    {
        docsWriter.NewLine = "\n";
        foreach (var line in updatedLines)
        {
            docsWriter.WriteLine(line);
        }
    }

    if (!string.IsNullOrEmpty(section))
    {
        Console.WriteLine($"Updated {fileName}, section {section}");
    }
    else
    {
        Console.WriteLine($"Updated {fileName}");
    }
}

